%% beamer/knitr slides
%% for Statistical Modeling and Data Visualization course @ UMass
%% Nicholas Reich: nick [at] schoolph.umass.edu


\documentclass[table]{beamer}


\input{../../slide-includes/standard-knitr-beamer-preamble}

%	The following variables are assumed by the standard preamble:
%	Global variable containing module name:
\title{Categories, factors, and colors}
%	Global variable containing module shortname:
%		(Currently unused, may be used in future.)
\newcommand{\ModuleShortname}{introRegression}
%	Global variable containing author name:
\author{Nicholas G Reich}
%	Global variable containing text of license terms:
\newcommand{\LicenseText}{Made available under the Creative Commons Attribution-ShareAlike 3.0 Unported License: http://creativecommons.org/licenses/by-sa/3.0/deed.en\textunderscore US }
%	Instructor: optional, can leave blank.
%		Recommended format: {Instructor: Jane Doe}
\newcommand{\Instructor}{}
%	Course: optional, can leave blank.
%		Recommended format: {Course: Biostatistics 101}
\newcommand{\Course}{}


\input{../../slide-includes/shortcuts}

\hypersetup{colorlinks,linkcolor=,urlcolor=MainColor}


%	******	Document body begins here	**********************

\begin{document}

%	Title page
\begin{frame}[plain]
	\titlepage
\end{frame}

%	******	Everything through the above line must be placed at
%		the top of any TeX file using the statsTeachR standard
%		beamer preamble.


<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(fig.path='figure/beamer-',fig.align='center',fig.show='hold',size='tiny', message=FALSE, warning=FALSE)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}{Different kinds of variables}
\begin{block}{Give some examples of each}

\bi
    \item Continuous: variables taking any real number value in a range
    \vspace{4em}
    \item Discrete: variables taking an integer value
    \vspace{4em}
    \item Categorical: variables taking one of a fixed set of values
\ei

\end{block}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Categorical variables in R often start as strings}

By default, characters are read in as characters, not as factors, although you can force factors.
A factor is a special type of R data type that can be used to represent a categorical variable with a fixed number of responses.

<<>>=
library(tidyverse)
co2 <- read_csv("../../data/co2emissions.csv")
head(co2)
@


\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Tidy aggregation and summary by category}

We can use {\tt group\_by()} and {\tt summarize()} to aggregate and compute summaries by categories. (You will be asked to do this in a future coding challenge.)

For example, here we compute the average CO2 emissions across all years, for each type of vehicle.

<<>>=
co2 %>%
  group_by(Type) %>%
  summarize(mean_emissions = mean(CO2))
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Tidy aggregation and summary by category}

You can compute multiple summaries at once.

<<>>=
co2 %>%
  group_by(Type) %>%
  summarize(
    mean_emissions = mean(CO2),
    max_emissions = max(CO2),
    min_emissions = min(CO2))
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using categorical variables for aesthetics}

Note that R translates the character variable into a factor for you without you doing anything.

<<fig.height=3>>=
ggplot(co2, aes(x = Year, y = CO2, shape = Type, fill = Type))+
  geom_point()
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using factors for aesthetics}

Note that you can get the same result by explicitly calling Type a {\tt factor}.

<<fig.height=3>>=
ggplot(co2, aes(x = Year, y = CO2, shape = factor(Type), fill = factor(Type)))+
  geom_point()
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using factors for aesthetics}

And with just a few small tweaks, we can customize

<<fig.height=3>>=
levels <- c("Urban Gasoline", "Rural Gasoline", "Urban Diesel", "Rural Diesel")
ggplot(co2, aes(x = Year, y = CO2, shape = Type, fill = Type)) +
  geom_point() +
  scale_shape_manual(breaks=levels, values=c(24, 21, 24, 21)) +
  scale_fill_manual(breaks = levels,
                    values=c("blue4", "dodgerblue", "orangered", "orange")) +
  ylab(expression(CO[2]*" (Mt)"))
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using factors for faceting}

Factors (or any variable with a small number of distinct values) can be used to create facets as well.

<<fig.height=3>>=
ggplot(co2, aes(x = Year, y = CO2)) +
  geom_point() +
  facet_wrap(~Type)
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Advanced use of factors: ordering}

By default, R will sort factors alphanumerically. Reordering factors might help you show more data.

<<fig.height=4>>=
gapminder <- read_csv("../../data/gapminder.csv") %>%
    filter(continent %in% c("Africa", "Oceania"))
ggplot(gapminder, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile()
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Advanced use of factors: ordering}

If ``order matters'' for your categorical variable, then turning it into an ordered factor might be useful.

<<fig.height=4>>=
## this redefines country based on average GDP
gapminder <- mutate(gapminder, country = reorder(country, gdpPercap, FUN=mean))

ggplot(gapminder, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile()
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Advanced use of factors: ordering}

Here we order based on the maximum GDP rather than the mean.

<<fig.height=4>>=
## this redefines country based on max GDP
gapminder <- mutate(gapminder, country = reorder(country, gdpPercap, FUN=max))

ggplot(gapminder, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile()
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{}

\huge
\center
Using color

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Three main types of color palettes}


\bi
  \item sequential: a gradient in one direction
  \item divergent: a gradient away from a center
  \item qualitative: categorical groupings
\ei

\vspace{4em}

\begin{block}{Setting up a small running example}

<<>>=
gapminder_asia <- read_csv("../../data/gapminder.csv") %>%
  filter(continent == "Asia")
@

\end{block}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Manual sequential color scale}

Using color scales from ColorBrewer: \href{https://colorbrewer2.org/}{colorbrewer2.org}.

<<fig.height=4>>=
ggplot(gapminder_asia, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile() +
    scale_fill_gradient(low="#fff7fb", high="#034e7b")
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Use {\tt RColorBrewer} palettes like a design pro}

Here are all of the sequential palettes available in {\tt RColorBrewer}. Good for showing variables that have a single natural direction:
<<fig.height=5>>=
RColorBrewer::display.brewer.all(n=NULL, type="seq", select=NULL, exact.n=TRUE)
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using {\tt RColorBrewer} to pick sequential palettes}

Picking palette colors using {\tt RColorBrewer}.
<<fig.height=3>>=
(pal <- RColorBrewer::brewer.pal(n=5, name="Reds"))
ggplot(gapminder, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile() +
    scale_fill_gradient(low=pal[1], high=pal[5])
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Special hot-cold sequential scales}

And from the {\tt viridis} package.

<<fig.height=4>>=
library(viridis)
ggplot(gapminder_asia, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile() +
    scale_fill_viridis()
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Special hot-cold sequential scales}

<<fig.height=4>>=
ggplot(gapminder_asia, aes(x=year, y=country, fill=lifeExp)) +
    geom_tile() +
    scale_fill_viridis(direction=-1)
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Divergent palettes}

Here are the RColorBrewer divergent palettes: good for showing variables that have a natural midpoint to facilitate a ``baseline'' comparison.
<<fig.height=4>>=
RColorBrewer::display.brewer.all(n=NULL, type="div", select=NULL, exact.n=TRUE)
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using divergent palettes to compare values to a baseline}

To create a ``baseline'' comparison for plotting a divergent variable, we create a new GDP variable in the dataset, where we set a country's GDP in 1952 as the ``basline'' (equal to 1).

<<fig.height=3>>=
pal <- RColorBrewer::brewer.pal(n=9, name="PRGn")

## extract 1952 life expectancy as a baseline
gapminder_asia_1952 <- gapminder_asia %>%
  filter(year==1952) %>%
  select(country, gdp1952 = gdpPercap)

## merge back into original dataset, compute new variable that shows change in life expectancy relative to baseline
gapminder_asia <- gapminder_asia %>%
  left_join(gapminder_asia_1952) %>%
  mutate(gdp_v_baseline = gdpPercap/gdp1952)

head(gapminder_asia)
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using divergent palettes to compare values to a baseline}

Note: when plotting a ratio, it can be useful to use a log transformation on the scale because this will make 0.5 and 2 have the same intensity color away from 1.
<<fig.height=3>>=
ggplot(gapminder_asia, aes(x=year, y=country, fill=gdp_v_baseline)) +
    geom_tile() +
    scale_fill_gradient2(low=pal[1], mid=pal[5], high=pal[9], midpoint = 0, trans="log2")
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Qualitative palettes}

Here are the available palettes from RColorBrewer that are qualitative. These are good for showing unordered categories for comparison.
<<fig.height=4>>=
RColorBrewer::display.brewer.all(n=NULL, type="qual", select=NULL, exact.n=TRUE)
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using qualitative palettes from {\tt RColorBrewer}}

For low-number palettes (usually less than 12 colors) you can request a qualitative palette type.
<<fig.height=3>>=
gapminder_asia %>%
  filter(country %in% c("Syria", "Iraq", "Iran", "China", "Thailand")) %>%
  ggplot(aes(x=year, y=gdpPercap, color=country)) +
  geom_point() + geom_line() +
  scale_color_brewer(type = "qual")
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]{Using qualitative palettes from {\tt RColorBrewer}}

You can also specify a palette directly.
<<fig.height=3>>=
gapminder_asia %>%
  filter(country %in% c("Syria", "Iraq", "Iran", "China", "Thailand")) %>%
  ggplot(aes(x=year, y=gdpPercap, color=country)) +
  geom_point() + geom_line() +
  scale_color_brewer(palette = "Dark2")
@

\end{frame}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\end{document}
